Index: src/profile-handler.cc
===================================================================
--- src/profile-handler.cc	(版本 75713)
+++ src/profile-handler.cc	(工作副本)
@@ -1,10 +1,10 @@
 // Copyright (c) 2009, Google Inc.
 // All rights reserved.
-// 
+//
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are
 // met:
-// 
+//
 //     * Redistributions of source code must retain the above copyright
 // notice, this list of conditions and the following disclaimer.
 //     * Redistributions in binary form must reproduce the above
@@ -14,7 +14,7 @@
 //     * Neither the name of Google Inc. nor the names of its
 // contributors may be used to endorse or promote products derived from
 // this software without specific prior written permission.
-// 
+//
 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
@@ -220,6 +220,7 @@
 
 void ProfileHandler::Init() {
   instance_ = new ProfileHandler();
+  instance_->RegisterThread();
 }
 
 ProfileHandler* ProfileHandler::Instance() {
@@ -442,21 +443,21 @@
   errno = saved_errno;
 }
 
-// The sole purpose of this class is to initialize the ProfileHandler singleton
-// when the global static objects are created. Note that the main thread will
-// be registered at this time.
-class ProfileHandlerInitializer {
- public:
-  ProfileHandlerInitializer() {
-    ProfileHandler::Instance()->RegisterThread();
-  }
+// // The sole purpose of this class is to initialize the ProfileHandler singleton
+// // when the global static objects are created. Note that the main thread will
+// // be registered at this time.
+// class ProfileHandlerInitializer {
+//  public:
+//   ProfileHandlerInitializer() {
+//     ProfileHandler::Instance()->RegisterThread();
+//   }
+//
+//  private:
+//   DISALLOW_COPY_AND_ASSIGN(ProfileHandlerInitializer);
+// };
+// // ProfileHandlerInitializer singleton
+// static ProfileHandlerInitializer profile_handler_initializer;
 
- private:
-  DISALLOW_COPY_AND_ASSIGN(ProfileHandlerInitializer);
-};
-// ProfileHandlerInitializer singleton
-static ProfileHandlerInitializer profile_handler_initializer;
-
 extern "C" void ProfileHandlerRegisterThread() {
   ProfileHandler::Instance()->RegisterThread();
 }
